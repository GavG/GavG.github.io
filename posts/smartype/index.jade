//output:index.html, pretty:false
extends ../../layout

block meta
  meta(property="og:type" content="article")
  meta(property="og:image" content=baseURL+'/images/posts/lock.png')
  script(src="https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js")

block header
  +banner(baseURL+'/images/posts/smartype.png', '#000', 'large')
  include ../../includes/progressIndicator

block content

  article.w3-container
    h3.w3-border-bottom.w3-border-light-grey.w3-padding-16 Smartype Keyboard "Weather Offline" Fix

    p The Smartype USB keyboard was introduced by KEYVIEW in 2012. It features a built-in display capable of showing a live view of the current line when text editing or a dashboard comprising of a few applets:
    div.container-row
        ul.w-50
            li The current time
            li The current calendar date
            li The current weather conditions
        ul.w-50
            li The latest email and unread count from a specified mailbox
            li Images from a specified directory

    h4.w3-padding-16 The Backstory

    p.
        I picked up one of these keyboards from a charity shop as it looked a wee bit interesting and was relatively cheap.

        Upon plugging the it in and glancing the instructions printed in the box it became apparent that the company providing the software had long gone and the driver / software were no longer being hosted on their site.

    div
        img.large(src=baseURL+'/images/posts/smartype_box_inner.jpg', alt="Smartype box inside view", style="max-width: 500px;").mx-auto

    p.
        Luckily after a bit of Googling I found a link to a download page via the #[a( href='https://archive.org/web/' title='waybackmachine') waybackmachine] and was able to install the software. (I'll pop a copy of this here for reference).

        After configuring the email and gallery features successfully realized that the live weather feature was a not functioning &#128532

    div
        img.large(src=baseURL+'/images/posts/smartype_weather_offline.jpg', alt="Smartype keyboard, non-functional weather applet", style="max-width: 500px;").mx-auto

    h4.w3-padding-16 The Fix

    p.
        I fired up Wireshark to see what was going on. It turns out that the software was trying to get weather data from a weather webservice API called 'worldweatheronline' using a premium account.

    img.large(src=baseURL+'/images/posts/smartype_wireshark_weather_api_access_denied.png', alt="Smartype keyboard, weather API access denied", style="max-width: 1200px;").mx-auto

    p.
        I could see the 401 status code and error message in the response frame and opeining it up in the browser confirmed that the API account's key had expired, probably because KEYVIEW stopped paying the bill which is fair enough.

    p.
        Not to worry though, I signed up for a free trial of the API and had a look at the data that was being returned.

    img.large(src=baseURL+'/images/posts/smartype_weather_api_response.png', alt="Smartype keyboard, weather API success response", style="max-width: 1200px;").mx-auto

    p.

        From the original request query params (viewed in wireshark) I could see that the software was requesting XML so I made sure to only look at the XML variant of the API response (it can also provide JSON).

        Thereafter I used an app called Fiddler (link) to capture the request to the API and spoof the response with the XML I'd got manually. To my surprise it worked.

    img.large(src=baseURL+'/images/posts/smartype_fiddler_full_response.png', alt="Smartype keyboard, Fiddler fake API response", style="max-width: 1200px;").mx-auto

    p.
        Although at nearly 1,000 lines of XML this seemed like an awful lot of redundant data considering the only fields the keyboard seemed to need were the temperature and the weather description

        So after a bit of experimenting I found the minimum response needed to make it work:

    img.large(src=baseURL+'/images/posts/smartype_weather_minimum_api_response.png', alt="Smartype keyboard, weather API minimum needed response", style="max-width: 1200px;").mx-auto

    p.
        Much better &#128522 This seemed like a good start to a solution. It would have been possible to somehow remap the request to use my new API key, but the free trial would only last for a certain amount of time and I didn't fancy paying a monthly subscription as this is just for fun afterall.

        Instead I had an idea to redirect the requests to a local server where I could then use an alternative free weather API #[a(href='https://openweathermap.org' title='Open Weather Map') openweathermap.org] to get the data I need and send that back instead.

        The app didn't have to do anything to complicated so I figured a lightweight node JS server would suffice:

    code
        pre.prettyprint.lang-js.w3-code.
            // server.js

            const http = require('http');
            const url = require('url');
            const weather = require('./weather.js')
            const fs = require('fs')

            fs.readFile('./config.json', (err, config) => {
                if (err || !config) return console.log('Missing Config, see README')
                config = JSON.parse(config)
                if(!config.api_key) return console.log('Missing API Key, see README')
                return run(config.api_key, config.port)
            })

            const description_map = {
                'Snow': 'Snowy',
                'Mist': 'Fog',
                'Clouds': 'Cloudy',
            }

            function run(api_key, port = 9999)
            {
                const server = http.createServer()

                server.on('request', async (req, res)=>  {
                    const query = url.parse(req.url, true).query;

                    let reply

                    if (query.q) {

                        try {
                            let result = await weather.get_current(api_key, query.q)

                            if(result.success){
                                let temp_c = Math.round(result.success.main.temp)
                                let temp_f = Math.round((temp_c * 1.8) + 32)
                                let description

                                if (result.success.weather[0]){
                                    if(result.success.weather[0].main in description_map){
                                        description = description_map[result.success.weather[0].main]
                                    } else {
                                        description = result.success.weather[0].main
                                    }
                                }

                                reply = `#{'<?xml version="1.0" encoding="UTF-8"?><data><current_condition><temp_C>${temp_c}</temp_C><temp_F>${temp_f}</temp_F>'}
                                        #{'<weatherDesc><![CDATA[${description}]]></weatherDesc></current_condition></data>'}`.replace(/\s/g, '')
                            } else {
                                console.log('Bad result from weather call:', result)
                            }

                        } catch (err) {
                            console.log('Error from weather call:', err)
                        }

                        if (reply) {
                            res.writeHead(200, {
                                'Content-Type': 'text/xml',
                            });
                            res.write(reply);
                        } else {
                            res.writeHead(500, {
                                'Content-Type': 'text/xml'
                            });
                        }

                        res.end();
                    }

                }).listen(port);
            }


    p.
        In order to redirect the current weather requests to the new server, the simplest / hackiest Windows solution I could come up with was to add an entry to the hosts file redirecting traffic to www.worldweatheronline.com to a new local interface (127.0.0.2):

        Host file entry:

    code.w3-code 127.0.0.2 www.worldweatheronline.com

    p Thereafter I could use netsh to redirect traffic on 127.0.0.2 to my node server which is running on localhost:

    code.w3-code netsh interface portproxy add v4tov4 listenport=80 listenaddress=127.0.0.2 connectport=9999 connectaddress=127.0.0.1

    p.
        I thought this was an alright solution, the only issue was that it didn't seem to work.This required a lot of head scratching and debugging.

        Initially I suspected that I'd missed some headers or similar so I compared the real 127.0.0.2 www.worldweatheronline.com response to mine and also to the mock response I had made in Fiddler.

        I made sure everything was the same, alas no dice. But there was one subtle difference, the values for the temperatures! In my mock data the temp values were all integers but in the data from the openweathermap.org API we were getting figures with 2DP of precission.

        I wouldn't have imagined something like that would break it but it did. So after fettling the formatting of the tem values we were golden. Almost. The next issue was the weather icons.

        I had at first thought these may have been coming from the API, but they don't seem to be. Removing the weather icon section from the response:


    code.w3-code.
        #{'<weatherIconUrl>'}<br>
        &nbsp#{'<![CDATA[http://cdn.worldweatheronline.net/images/wsymbols01_png_64/wsymbol_0002_sunny_intervals.png]]>'}<br>
        #{'</weatherIconUrl>'}

    p.
        made no difference. Plus on further inspection the weather symbols from the API don't even match those on the device.

        Therefore we can deduce that the keyboard has it's own icons. After some more testing I worked out that the icons change based on the presence of certain keywords in the weatherDesc tag:

        e.g.

    code.w3-code.
        #{'<weatherDesc>'}<br>
        &nbsp#{'<![CDATA[Partly cloudy]]>'}<br>
        #{'</weatherDesc>'}

    p In this example the keyword 'cloudy; is all that's needed to display the cloudy icon.

    p Luckily most of the sought keywords have matching equivelants in the openweathermap.org API! So not much work was needed there bar a couple of mappings:

    code.w3-code.
        const description_map = {<br>
        &nbsp'Snow': '???',<br>
        &nbsp'Mist': 'Fog',<br>
        &nbsp'Clouds': 'Cloudy',<br>
        }

    p.
        You may have heard Kate Bush sing 50 words for snow but I couldn't find one that would make the keyboard show a snowing icon.

        I spent a lot of time going through historical Scottish weather data in the www.worldweatheronline.com API to see what possible values it could be (note these don't seem to be explicitly listed anywhere) and found many candidates including the likes of: 'Light snow showers' and 'Blizzard' but none seemed to work.

        And so I moved on to decompiling the app in a hunt for snow. I used dotPeek by JetBrains, which was very useful. Unfortunately I couldn't find what I was looking for. So I've just left that for now and will probably only revisit it again when it next starts snowing.


